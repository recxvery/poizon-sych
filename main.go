package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type UserState struct {
	Step         string
	Order        Order
	WaitingPhoto bool
}

type Order struct {
	UserID       int64  `json:"user_id"`
	FullName     string `json:"full_name"`
	Username     string `json:"username"`
	Article      string `json:"article"`
	Size         string `json:"size"`
	Color        string `json:"color"`
	City         string `json:"city"`
	Delivery     string `json:"delivery"`
	PhotoFileID  string `json:"photo_file_id,omitempty"`
	Contact      string `json:"contact"`
	Status       string `json:"status"`
	AdminMessage string `json:"admin_message,omitempty"`
}

var (
	userStates = make(map[int64]*UserState)
	adminIDs   = []int64{1188378688, 1103525572, 993582884}
	ordersFile = "orders.json"
)

func main() {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN environment variable is not set")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatal("Error creating bot: ", err)
	}

	bot.Debug = false
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID
			if userStates[chatID] == nil {
				userStates[chatID] = &UserState{Step: "menu"}
			}
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	chatID := message.Chat.ID
	state := userStates[chatID]

	if message.IsCommand() {
		switch message.Command() {
		case "start":
			state.Step = "menu"
			sendMenu(bot, chatID)
			return
		case "myorders":
			sendMyOrders(bot, chatID, message.From.UserName)
			return
		}
	}

	if state.WaitingPhoto && message.Photo != nil {
		photo := message.Photo[len(message.Photo)-1]
		state.Order.PhotoFileID = photo.FileID
		state.WaitingPhoto = false
		state.Step = "contact"
		msg := tgbotapi.NewMessage(chatID, "‚òéÔ∏è –£–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–ò–º—è –∏ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä):")
		bot.Send(msg)
		return
	}

	switch state.Step {
	case "menu":
		sendMenu(bot, chatID)
	case "welcome":
		sendWelcome(bot, chatID)
	case "start_order":
		msg := tgbotapi.NewMessage(chatID, "üî¢ –í–≤–µ–¥–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
		bot.Send(msg)
		state.Step = "article"
	case "article":
		state.Order.Article = message.Text
		msg := tgbotapi.NewMessage(chatID, "üìè –£–∫–∞–∂–∏ —Ä–∞–∑–º–µ—Ä (EU/US/CN):")
		bot.Send(msg)
		state.Step = "size"
	case "size":
		state.Order.Size = message.Text
		msg := tgbotapi.NewMessage(chatID, "üé® –£–∫–∞–∂–∏ —Ü–≤–µ—Ç/–º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∏–Ω–∞—á–µ –Ω–∞–ø–∏—à–∏ '-'):")
		bot.Send(msg)
		state.Step = "color"
	case "color":
		state.Order.Color = message.Text
		msg := tgbotapi.NewMessage(chatID, "üìç –£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥:")
		bot.Send(msg)
		state.Step = "city"
	case "city":
		state.Order.City = message.Text
		msg := tgbotapi.NewMessage(chatID, "üöö –£–∫–∞–∂–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:")
		bot.Send(msg)
		state.Step = "delivery"
	case "delivery":
		state.Order.Delivery = message.Text
		msg := tgbotapi.NewMessage(chatID, "–•–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å–∫—Ä–∏–Ω —Ç–æ–≤–∞—Ä–∞?")
		msg.ReplyMarkup = yesNoKeyboard()
		bot.Send(msg)
		state.Step = "want_photo"
	case "want_photo":
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.")
		msg.ReplyMarkup = yesNoKeyboard()
		bot.Send(msg)
	case "contact":
		state.Order.Contact = message.Text
		state.Order.UserID = chatID
		if message.From != nil {
			state.Order.Username = message.From.UserName
			state.Order.FullName = message.From.FirstName + " " + message.From.LastName
		}
		state.Order.Status = "pending"
		saveOrder(state.Order)
		msg := tgbotapi.NewMessage(chatID, "üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–≤–∞—Ä –∏ –ø—Ä–∏—à–ª—ë–º —Ç–µ–±–µ:\n- –ò—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É\n- –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏\n- –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10‚Äì20 –º–∏–Ω—É—Ç.")
		bot.Send(msg)
		notifyAdmins(bot, state.Order)
		delete(userStates, chatID)
	case "await_admin_price":
		// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
	}
}

func handleCallback(bot *tgbotapi.BotAPI, cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	state := userStates[chatID]
	data := cb.Data

	switch state.Step {
	case "menu":
		if data == "start_order" {
			state.Step = "start_order"
			handleMessage(bot, cb.Message)
		} else if data == "myorders" {
			sendMyOrders(bot, chatID, cb.From.UserName)
		} else if data == "contact_admins" {
			sendContactAdmins(bot, chatID)
		}
	case "welcome":
		if data == "start_order" {
			state.Step = "start_order"
			handleMessage(bot, cb.Message)
		}
	case "want_photo":
		if data == "yes_photo" {
			state.WaitingPhoto = true
			msg := tgbotapi.NewMessage(chatID, "–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
			bot.Send(msg)
			state.Step = "wait_photo_upload"
		} else if data == "skip_photo" {
			state.Step = "contact"
			msg := tgbotapi.NewMessage(chatID, "‚òéÔ∏è –£–∫–∞–∂–∏ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–ò–º—è –∏ Telegram –∏–ª–∏ –Ω–æ–º–µ—Ä):")
			bot.Send(msg)
		}
	case "wait_photo_upload":
		// –ñ–¥—ë–º —Ñ–æ—Ç–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ handleMessage
	case "admin_action":
		// data: admin_price:<orderUserID> –∏–ª–∏ admin_reject:<orderUserID>
		if strings.HasPrefix(data, "admin_price:") {
			userIDstr := strings.TrimPrefix(data, "admin_price:")
			userID, _ := strconv.ParseInt(userIDstr, 10, 64)
			userStates[userID] = &UserState{Step: "await_admin_price"}
			msg := tgbotapi.NewMessage(cb.From.ID, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–µ–Ω–∞, —Å—Ä–æ–∫–∏, –æ–ø–ª–∞—Ç–∞):")
			bot.Send(msg)
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ ‚Äî —ç—Ç–æ —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			userStates[cb.From.ID] = &UserState{Step: "send_price", Order: Order{UserID: userID}}
		} else if strings.HasPrefix(data, "admin_reject:") {
			userIDstr := strings.TrimPrefix(data, "admin_reject:")
			userID, _ := strconv.ParseInt(userIDstr, 10, 64)
			updateOrderStatus(userID, "rejected", "")
			msg := tgbotapi.NewMessage(userID, "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
			bot.Send(msg)
		}
	case "user_confirm":
		if data == "user_accept" {
			updateOrderStatus(chatID, "confirmed", "")
			msg := tgbotapi.NewMessage(chatID, "üöÄ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã –Ω–∞–ø–∏—à–µ–º —Ç–µ–±–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–ª–∏ –≤ –ø—É—Ç–∏.")
			bot.Send(msg)
		} else if data == "user_decline" {
			updateOrderStatus(chatID, "declined", "")
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.")
			bot.Send(msg)
		}
	}
}

func sendWelcome(bot *tgbotapi.BotAPI, chatID int64) {
	text := "–ü—Ä–∏–≤–µ—Ç!\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é —Ç–æ–≤–∞—Ä–∞:\n1. –í–∫–ª—é—á–∏ VPN\n2. –ó–∞–π–¥–∏ –≤ Poizon\n3. –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä –∏ —Å–∫–æ–ø–∏—Ä—É–π –∞—Ä—Ç–∏–∫—É–ª\n4. –£–∫–∞–∂–∏ —Ä–∞–∑–º–µ—Ä—ã –∏ –¥–æ—Å—Ç–∞–≤–∫—É\n5. –ú—ã –ø—Ä–∏—à–ª—ë–º —Ü–µ–Ω—É –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = startOrderKeyboard()
	bot.Send(msg)
}

func startOrderKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì® –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "start_order"),
			tgbotapi.NewInlineKeyboardButtonURL("üìñ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥", "https://dzen.ru/a/Z3qUVa602E7y-7zW"),
		),
	)
}

func yesNoKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞", "yes_photo"),
			tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_photo"),
		),
	)
}

func saveOrder(order Order) {
	orders := loadOrders()
	orders = append(orders, order)
	data, _ := json.MarshalIndent(orders, "", "  ")
	_ = ioutil.WriteFile(ordersFile, data, 0644)
}

func loadOrders() []Order {
	var orders []Order
	data, err := ioutil.ReadFile(ordersFile)
	if err == nil {
		_ = json.Unmarshal(data, &orders)
	}
	return orders
}

func sendMyOrders(bot *tgbotapi.BotAPI, chatID int64, username string) {
	orders := loadOrders()
	var sb strings.Builder
	for _, o := range orders {
		if o.UserID == chatID || o.Username == username {
			sb.WriteString(fmt.Sprintf("–¢–æ–≤–∞—Ä: %s\n–†–∞–∑–º–µ—Ä: %s\n–¶–≤–µ—Ç: %s\n–ì–æ—Ä–æ–¥: %s\n–°—Ç–∞—Ç—É—Å: %s\n---\n", o.Article, o.Size, o.Color, o.City, o.Status))
		}
	}
	if sb.Len() == 0 {
		sb.WriteString("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
	}
	msg := tgbotapi.NewMessage(chatID, sb.String())
	bot.Send(msg)
}

func notifyAdmins(bot *tgbotapi.BotAPI, order Order) {
	for _, adminID := range adminIDs {
		text := fmt.Sprintf("–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n–ò–º—è: %s\nUsername: @%s\n–ê—Ä—Ç–∏–∫—É–ª: %s\n–†–∞–∑–º–µ—Ä: %s\n–¶–≤–µ—Ç: %s\n–ì–æ—Ä–æ–¥: %s\n–î–æ—Å—Ç–∞–≤–∫–∞: %s\n–ö–æ–Ω—Ç–∞–∫—Ç: %s",
			order.FullName, order.Username, order.Article, order.Size, order.Color, order.City, order.Delivery, order.Contact)
		msg := tgbotapi.NewMessage(adminID, text)
		msg.ReplyMarkup = adminActionKeyboard(order.UserID)
		bot.Send(msg)
		if order.PhotoFileID != "" {
			photoMsg := tgbotapi.NewPhoto(adminID, tgbotapi.FileID(order.PhotoFileID))
			bot.Send(photoMsg)
		}
	}
}

// –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–∏ sendMenu, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ undefined
func sendMenu(bot *tgbotapi.BotAPI, chatID int64) {
	orders := loadOrders()
	hasOrders := false
	for _, o := range orders {
		if o.UserID == chatID {
			hasOrders = true
			break
		}
	}
	if hasOrders {
		text := "üëã –°–Ω–æ–≤–∞ –ø—Ä–∏–≤–µ—Ç!\n–¢—ã –º–æ–∂–µ—à—å:\n- üì® –û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n- üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ\n- üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º\n- üìñ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥"
		msg := tgbotapi.NewMessage(chatID, text)
		msg.ReplyMarkup = menuKeyboard()
		bot.Send(msg)
	} else {
		sendWelcome(bot, chatID)
	}
}

func menuKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì® –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "start_order"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "myorders"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º", "contact_admins"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("üìñ –ü–æ–ª–Ω—ã–π –≥–∞–π–¥", "https://dzen.ru/a/Z3qUVa602E7y-7zW"),
		),
	)
}

func sendContactAdmins(bot *tgbotapi.BotAPI, chatID int64) {
	var sb strings.Builder
	sb.WriteString("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∞–º–∏:\n")
	for _, id := range adminIDs {
		sb.WriteString(fmt.Sprintf("- @admin%d\n", id)) // –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ username
	}
	msg := tgbotapi.NewMessage(chatID, sb.String())
	bot.Send(msg)
}

func adminActionKeyboard(userID int64) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–µ–Ω—É", fmt.Sprintf("admin_price:%d", userID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("admin_reject:%d", userID)),
		),
	)
}

func updateOrderStatus(userID int64, status, adminMsg string) {
	orders := loadOrders()
	for i, o := range orders {
		if o.UserID == userID && o.Status == "pending" {
			orders[i].Status = status
			if adminMsg != "" {
				orders[i].AdminMessage = adminMsg
			}
		}
	}
	data, _ := json.MarshalIndent(orders, "", "  ")
	_ = ioutil.WriteFile(ordersFile, data, 0644)
	if status == "price_sent" && adminMsg != "" {
		msg := tgbotapi.NewMessage(userID, adminMsg)
		msg.ReplyMarkup = userConfirmKeyboard()
		// –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å bot, –Ω–æ —Ç—É—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –õ—É—á—à–µ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ handleMessage.
	}
}

func userConfirmKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "user_accept"),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", "user_decline"),
		),
	)
}
